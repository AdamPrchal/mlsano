/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RecipesIndexRouteImport } from './routes/recipes/index'
import { Route as PlannerIndexRouteImport } from './routes/planner/index'
import { Route as RecipesAddRouteImport } from './routes/recipes/add'
import { Route as RecipesRecipeIdRouteImport } from './routes/recipes/$recipeId'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RecipesIndexRoute = RecipesIndexRouteImport.update({
  id: '/recipes/',
  path: '/recipes/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlannerIndexRoute = PlannerIndexRouteImport.update({
  id: '/planner/',
  path: '/planner/',
  getParentRoute: () => rootRouteImport,
} as any)
const RecipesAddRoute = RecipesAddRouteImport.update({
  id: '/recipes/add',
  path: '/recipes/add',
  getParentRoute: () => rootRouteImport,
} as any)
const RecipesRecipeIdRoute = RecipesRecipeIdRouteImport.update({
  id: '/recipes/$recipeId',
  path: '/recipes/$recipeId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/recipes/$recipeId': typeof RecipesRecipeIdRoute
  '/recipes/add': typeof RecipesAddRoute
  '/planner': typeof PlannerIndexRoute
  '/recipes': typeof RecipesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/recipes/$recipeId': typeof RecipesRecipeIdRoute
  '/recipes/add': typeof RecipesAddRoute
  '/planner': typeof PlannerIndexRoute
  '/recipes': typeof RecipesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/recipes/$recipeId': typeof RecipesRecipeIdRoute
  '/recipes/add': typeof RecipesAddRoute
  '/planner/': typeof PlannerIndexRoute
  '/recipes/': typeof RecipesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/recipes/$recipeId'
    | '/recipes/add'
    | '/planner'
    | '/recipes'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/recipes/$recipeId'
    | '/recipes/add'
    | '/planner'
    | '/recipes'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/recipes/$recipeId'
    | '/recipes/add'
    | '/planner/'
    | '/recipes/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  RecipesRecipeIdRoute: typeof RecipesRecipeIdRoute
  RecipesAddRoute: typeof RecipesAddRoute
  PlannerIndexRoute: typeof PlannerIndexRoute
  RecipesIndexRoute: typeof RecipesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recipes/': {
      id: '/recipes/'
      path: '/recipes'
      fullPath: '/recipes'
      preLoaderRoute: typeof RecipesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/planner/': {
      id: '/planner/'
      path: '/planner'
      fullPath: '/planner'
      preLoaderRoute: typeof PlannerIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recipes/add': {
      id: '/recipes/add'
      path: '/recipes/add'
      fullPath: '/recipes/add'
      preLoaderRoute: typeof RecipesAddRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recipes/$recipeId': {
      id: '/recipes/$recipeId'
      path: '/recipes/$recipeId'
      fullPath: '/recipes/$recipeId'
      preLoaderRoute: typeof RecipesRecipeIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  RecipesRecipeIdRoute: RecipesRecipeIdRoute,
  RecipesAddRoute: RecipesAddRoute,
  PlannerIndexRoute: PlannerIndexRoute,
  RecipesIndexRoute: RecipesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
